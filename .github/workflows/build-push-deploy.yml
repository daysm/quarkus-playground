name: Build, Push, and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-publish-dev:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: ./gradlew build

      - name: Authenticate to Google Cloud via Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-actions-pool-${{ secrets.ENV }}/providers/github-provider-${{ secrets.ENV }}"
          service_account: "github-pusher-sa-${{ secrets.ENV }}@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
          audience: "https://iam.googleapis.com/projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-actions-pool-${{ secrets.ENV }}/providers/github-provider-${{ secrets.ENV }}"

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Build and push Docker image to Artifact Registry
        run: |
          IMAGE_URI="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/images-${{ secrets.ENV }}/app"

          docker build -t "$IMAGE_URI:${{ github.sha }}" -f src/main/docker/Dockerfile.jvm .
          docker push "$IMAGE_URI:${{ github.sha }}"

          # Tag with latest-dev for PRs, latest for main
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            docker tag "$IMAGE_URI:${{ github.sha }}" "$IMAGE_URI:latest-dev"
            docker push "$IMAGE_URI:latest-dev"
          fi

          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            docker tag "$IMAGE_URI:${{ github.sha }}" "$IMAGE_URI:latest"
            docker push "$IMAGE_URI:latest"
          fi
          
  flyway-migrate-dev:
    needs: build-and-publish-dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: dev
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Run Flyway migrations (dev)
        run: |
          docker run --rm \
            -v $(pwd)/src/main/resources/db/migration:/flyway/sql \
            flyway/flyway migrate \
              -url="${{ secrets.DB_URL }}" \
              -user="${{ secrets.DB_USER }}" \
              -password="${{ secrets.DB_PASSWORD }}"

  deploy-dev:
    needs: flyway-migrate-dev
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Trigger Coolify Dev Deployment
        run: |
          curl --request GET "${{ secrets.COOLIFY_DEV_WEBHOOK }}" \
            --header "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}"

  build-and-publish-prod:
    needs: deploy-dev
    # Only run for main branch pushes, not pull requests
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: ./gradlew build

      - name: Authenticate to Google Cloud via Workload Identity Federation (Prod)
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-actions-pool-${{ secrets.ENV }}/providers/github-provider-${{ secrets.ENV }}"
          service_account: "github-pusher-sa-prod@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
          audience: "https://iam.googleapis.com/projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-actions-pool-${{ secrets.ENV }}/providers/github-provider-${{ secrets.ENV }}"
      
      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
      
      - name: Build and push Docker image to Artifact Registry (Prod)
        run: |
          IMAGE_URI="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/images-prod/app"
          docker build -t "$IMAGE_URI:${{ github.sha }}" -f src/main/docker/Dockerfile.jvm .
          docker push "$IMAGE_URI:${{ github.sha }}"
          docker tag "$IMAGE_URI:${{ github.sha }}" "$IMAGE_URI:latest"
          docker push "$IMAGE_URI:latest"

  flyway-migrate-prod:
    needs: build-and-publish-prod
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: prod
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Run Flyway migrations (prod)
        run: |
          docker run --rm \
            -v $(pwd)/src/main/resources/db/migration:/flyway/sql \
            flyway/flyway migrate \
              -url="${{ secrets.DB_URL }}" \
              -user="${{ secrets.DB_USER }}" \
              -password="${{ secrets.DB_PASSWORD }}"

  deploy-prod:
    needs: flyway-migrate-prod
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Trigger Coolify Prod Deployment
        run: |
          curl --request GET "${{ secrets.COOLIFY_PROD_WEBHOOK }}" \
            --header "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}"
